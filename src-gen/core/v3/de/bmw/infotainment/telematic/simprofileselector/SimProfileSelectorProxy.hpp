/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_PROXY_HPP_
#define V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_PROXY_HPP_

#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelectorProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v3 {
namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselector {

template <typename ... _AttributeExtensions>
class SimProfileSelectorProxy
    : virtual public SimProfileSelector,
      virtual public SimProfileSelectorProxyBase,
      virtual public _AttributeExtensions... {
public:
    SimProfileSelectorProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~SimProfileSelectorProxy();

    typedef ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /*
     * description: 
     * Standard[en]=WAVE broadcasts the result of the download and installation the consumer SIM profile started with the sendActivationCode method
     * SPP subscribes to this broadcast after sending an activation code to start the download process
     */
    /**
     * Returns the wrapper class that provides access to the broadcast downloadAndInstallResult.
     */
    virtual DownloadAndInstallResultEvent& getDownloadAndInstallResultEvent() {
        return delegate_->getDownloadAndInstallResultEvent();
    }
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
     * Calls changePin with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void changePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _oldPin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult &_modifypin, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls changePin with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> changePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_oldPin, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, ChangePinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
     * Calls configureDataConnection with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void configureDataConnection(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _hotspotActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult &_dataConfig, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls configureDataConnection with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> configureDataConnectionAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_hotspotActive, ConfigureDataConnectionAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
     * Calls configureProfileRoaming with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void configureProfileRoaming(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _roamingActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult &_roamingconfig, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls configureProfileRoaming with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> configureProfileRoamingAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_roamingActive, ConfigureProfileRoamingAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
     * Calls disablePin with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void disablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult &_removepin, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls disablePin with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> disablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, DisablePinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
     * Calls enablePin with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void enablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult &_setpin, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls enablePin with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> enablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, EnablePinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
     * Calls requestDeleteAllProfiles with synchronous semantics.
     *
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestDeleteAllProfiles(CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult &_deleteall, std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid > &_iccid, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestDeleteAllProfiles with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestDeleteAllProfilesAsync(RequestDeleteAllProfilesAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
     * Calls requestDeleteSimProfile with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestDeleteSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult &_deleteresult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestDeleteSimProfile with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestDeleteSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDeleteSimProfileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
     * Calls requestDisableSimProfile with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestDisableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult &_disableResult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestDisableSimProfile with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestDisableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDisableSimProfileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
     * (asterisk) consumer SIM profile
     * Calls requestEnableSimProfile with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void requestEnableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult &_enableResult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls requestEnableSimProfile with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> requestEnableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestEnableSimProfileAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
     * Calls sendActivationCode with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void sendActivationCode(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode _activation, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode _confirmationCode, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult &_acresult, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls sendActivationCode with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> sendActivationCodeAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activation, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode &_confirmationCode, SendActivationCodeAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
     * Calls unblockPin with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void unblockPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk _puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult &_checkpuk, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls unblockPin with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> unblockPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk &_puk, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, UnblockPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
     * Calls verifyPin with synchronous semantics.
     *
     * All const parameters are input parameters to this method.
     * All non-const parameters will be filled with the returned values.
     * The CallStatus will be filled when the method returns and indicate either
     * "SUCCESS" or which type of error has occurred. In case of an error, ONLY the CallStatus
     * will be set.
     */
    virtual void verifyPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult &_checkpin, const CommonAPI::CallInfo *_info = nullptr);
    /**
     * Calls verifyPin with asynchronous semantics.
     *
     * The provided callback will be called when the reply to this call arrives or
     * an error occurs during the call. The CallStatus will indicate either "SUCCESS"
     * or which type of error has occurred. In case of any error, ONLY the CallStatus
     * will have a defined value.
     * The std::future returned by this method will be fulfilled at arrival of the reply.
     * It will provide the same value for CallStatus as will be handed to the callback.
     */
    virtual std::future<CommonAPI::CallStatus> verifyPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, VerifyPinAsyncCallback _callback = nullptr, const CommonAPI::CallInfo *_info = nullptr);
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    /**
     * Returns the wrapper class that provides access to the attribute csimMemorySpace.
     */
    virtual CsimMemorySpaceAttribute& getCsimMemorySpaceAttribute() {
        return delegate_->getCsimMemorySpaceAttribute();
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    /**
     * Returns the wrapper class that provides access to the attribute csimNetwork.
     */
    virtual CsimNetworkAttribute& getCsimNetworkAttribute() {
        return delegate_->getCsimNetworkAttribute();
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    /**
     * Returns the wrapper class that provides access to the attribute eid.
     */
    virtual EidAttribute& getEidAttribute() {
        return delegate_->getEidAttribute();
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    /**
     * Returns the wrapper class that provides access to the attribute imei.
     */
    virtual ImeiAttribute& getImeiAttribute() {
        return delegate_->getImeiAttribute();
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    /**
     * Returns the wrapper class that provides access to the attribute profiles.
     */
    virtual ProfilesAttribute& getProfilesAttribute() {
        return delegate_->getProfilesAttribute();
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    /**
     * Returns the wrapper class that provides access to the attribute psimNetwork.
     */
    virtual PsimNetworkAttribute& getPsimNetworkAttribute() {
        return delegate_->getPsimNetworkAttribute();
    }



 private:
    std::shared_ptr< SimProfileSelectorProxyBase> delegate_;
};

typedef SimProfileSelectorProxy<> SimProfileSelectorProxyDefault;

namespace SimProfileSelectorExtensions {
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    template <template <typename > class _ExtensionType>
    class CsimMemorySpaceAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::CsimMemorySpaceAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::CsimMemorySpaceAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CsimMemorySpaceAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getCsimMemorySpaceAttribute()) {
        }
    
        inline extension_type& getCsimMemorySpaceAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    template <template <typename > class _ExtensionType>
    class CsimNetworkAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::CsimNetworkAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::CsimNetworkAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        CsimNetworkAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getCsimNetworkAttribute()) {
        }
    
        inline extension_type& getCsimNetworkAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    template <template <typename > class _ExtensionType>
    class EidAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::EidAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::EidAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        EidAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getEidAttribute()) {
        }
    
        inline extension_type& getEidAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    template <template <typename > class _ExtensionType>
    class ImeiAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::ImeiAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::ImeiAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ImeiAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getImeiAttribute()) {
        }
    
        inline extension_type& getImeiAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    template <template <typename > class _ExtensionType>
    class ProfilesAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::ProfilesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::ProfilesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        ProfilesAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getProfilesAttribute()) {
        }
    
        inline extension_type& getProfilesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    template <template <typename > class _ExtensionType>
    class PsimNetworkAttributeExtension {
     public:
        typedef _ExtensionType< SimProfileSelectorProxyBase::PsimNetworkAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< SimProfileSelectorProxyBase::PsimNetworkAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        PsimNetworkAttributeExtension(SimProfileSelectorProxyBase& proxy): attributeExtension_(proxy.getPsimNetworkAttribute()) {
        }
    
        inline extension_type& getPsimNetworkAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace SimProfileSelectorExtensions

//
// SimProfileSelectorProxy Implementation
//
template <typename ... _AttributeExtensions>
SimProfileSelectorProxy<_AttributeExtensions...>::SimProfileSelectorProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< SimProfileSelectorProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< SimProfileSelectorProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
SimProfileSelectorProxy<_AttributeExtensions...>::~SimProfileSelectorProxy() {
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::changePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _oldPin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult &_modifypin, const CommonAPI::CallInfo *_info) {
    delegate_->changePin(_iccid, _oldPin, _newPin, _internalCallStatus, _modifypin, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::changePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_oldPin, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, ChangePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->changePinAsync(_iccid, _oldPin, _newPin, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::configureDataConnection(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _hotspotActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult &_dataConfig, const CommonAPI::CallInfo *_info) {
    delegate_->configureDataConnection(_iccid, _hotspotActive, _internalCallStatus, _dataConfig, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::configureDataConnectionAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_hotspotActive, ConfigureDataConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->configureDataConnectionAsync(_iccid, _hotspotActive, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::configureProfileRoaming(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _roamingActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult &_roamingconfig, const CommonAPI::CallInfo *_info) {
    delegate_->configureProfileRoaming(_iccid, _roamingActive, _internalCallStatus, _roamingconfig, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::configureProfileRoamingAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_roamingActive, ConfigureProfileRoamingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->configureProfileRoamingAsync(_iccid, _roamingActive, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::disablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult &_removepin, const CommonAPI::CallInfo *_info) {
    delegate_->disablePin(_iccid, _pin, _internalCallStatus, _removepin, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::disablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, DisablePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->disablePinAsync(_iccid, _pin, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::enablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult &_setpin, const CommonAPI::CallInfo *_info) {
    delegate_->enablePin(_iccid, _pin, _internalCallStatus, _setpin, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::enablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, EnablePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->enablePinAsync(_iccid, _pin, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::requestDeleteAllProfiles(CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult &_deleteall, std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid > &_iccid, const CommonAPI::CallInfo *_info) {
    delegate_->requestDeleteAllProfiles(_internalCallStatus, _deleteall, _iccid, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::requestDeleteAllProfilesAsync(RequestDeleteAllProfilesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestDeleteAllProfilesAsync(_callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::requestDeleteSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult &_deleteresult, const CommonAPI::CallInfo *_info) {
    delegate_->requestDeleteSimProfile(_iccid, _internalCallStatus, _deleteresult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::requestDeleteSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDeleteSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestDeleteSimProfileAsync(_iccid, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::requestDisableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult &_disableResult, const CommonAPI::CallInfo *_info) {
    delegate_->requestDisableSimProfile(_iccid, _internalCallStatus, _disableResult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::requestDisableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDisableSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestDisableSimProfileAsync(_iccid, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
 * (asterisk) consumer SIM profile
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::requestEnableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult &_enableResult, const CommonAPI::CallInfo *_info) {
    delegate_->requestEnableSimProfile(_iccid, _internalCallStatus, _enableResult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::requestEnableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestEnableSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->requestEnableSimProfileAsync(_iccid, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::sendActivationCode(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode _activation, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode _confirmationCode, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult &_acresult, const CommonAPI::CallInfo *_info) {
    delegate_->sendActivationCode(_activation, _confirmationCode, _internalCallStatus, _acresult, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::sendActivationCodeAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activation, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode &_confirmationCode, SendActivationCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->sendActivationCodeAsync(_activation, _confirmationCode, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::unblockPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk _puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult &_checkpuk, const CommonAPI::CallInfo *_info) {
    delegate_->unblockPin(_iccid, _puk, _newPin, _internalCallStatus, _checkpuk, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::unblockPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk &_puk, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, UnblockPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->unblockPinAsync(_iccid, _puk, _newPin, _callback, _info);
}
/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
 */
template <typename ... _AttributeExtensions>
void SimProfileSelectorProxy<_AttributeExtensions...>::verifyPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult &_checkpin, const CommonAPI::CallInfo *_info) {
    delegate_->verifyPin(_iccid, _pin, _internalCallStatus, _checkpin, _info);
}

template <typename ... _AttributeExtensions>
std::future<CommonAPI::CallStatus> SimProfileSelectorProxy<_AttributeExtensions...>::verifyPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, VerifyPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    return delegate_->verifyPinAsync(_iccid, _pin, _callback, _info);
}

template <typename ... _AttributeExtensions>
const CommonAPI::Address &SimProfileSelectorProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool SimProfileSelectorProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool SimProfileSelectorProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& SimProfileSelectorProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& SimProfileSelectorProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> SimProfileSelectorProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace simprofileselector
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de
} // namespace v3

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorProxy,
    _AttributeExtension> {
    typedef typename ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorProxy<
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::CsimMemorySpaceAttributeExtension<_AttributeExtension>, 
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::CsimNetworkAttributeExtension<_AttributeExtension>, 
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::EidAttributeExtension<_AttributeExtension>, 
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::ImeiAttributeExtension<_AttributeExtension>, 
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::ProfilesAttributeExtension<_AttributeExtension>, 
            ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorExtensions::PsimNetworkAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v3_0 = v3;

#endif // V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_PROXY_HPP_
