/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_HPP_
#define V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_HPP_

#include <functional>
#include <sstream>



#include <de/bmw/infotainment/telematic/simprofileselectortypes/SimProfileSelectorTypes.hpp>

#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelector.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <cstdint>
#include <string>
#include <unordered_set>
#include <vector>

#include <mutex>

#include <CommonAPI/Stub.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v3 {
namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselector {

/**
 * Receives messages from remote and handles all dispatching of deserialized calls
 * to a stub for the service SimProfileSelector. Also provides means to send broadcasts
 * and attribute-changed-notifications of observable attributes as defined by this service.
 * An application developer should not need to bother with this class.
 */
class SimProfileSelectorStubAdapter
    : public virtual CommonAPI::StubAdapter,
      public virtual SimProfileSelector {
 public:
    /**
    * Sends a broadcast event for downloadAndInstallResult. Should not be called directly.
    * Instead, the "fire<broadcastName>Event" methods of the stub should be used.
    */
    virtual void fireDownloadAndInstallResultEvent(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activationCode, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult &_installationresult) = 0;
    ///Notifies all remote listeners about a change of value of the attribute csimMemorySpace.
    virtual void fireCsimMemorySpaceAttributeChanged(const int64_t &csimMemorySpace) = 0;
    ///Notifies all remote listeners about a change of value of the attribute csimNetwork.
    virtual void fireCsimNetworkAttributeChanged(const std::string &csimNetwork) = 0;
    ///Notifies all remote listeners about a change of value of the attribute eid.
    virtual void fireEidAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &eid) = 0;
    ///Notifies all remote listeners about a change of value of the attribute imei.
    virtual void fireImeiAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &imei) = 0;
    ///Notifies all remote listeners about a change of value of the attribute profiles.
    virtual void fireProfilesAttributeChanged(const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &profiles) = 0;
    ///Notifies all remote listeners about a change of value of the attribute psimNetwork.
    virtual void firePsimNetworkAttributeChanged(const std::string &psimNetwork) = 0;


    virtual void deactivateManagedInstances() = 0;

    void lockCsimMemorySpaceAttribute(bool _lockAccess) {
        if (_lockAccess) {
            csimMemorySpaceMutex_.lock();
        } else {
            csimMemorySpaceMutex_.unlock();
        }
    }
    void lockCsimNetworkAttribute(bool _lockAccess) {
        if (_lockAccess) {
            csimNetworkMutex_.lock();
        } else {
            csimNetworkMutex_.unlock();
        }
    }
    void lockEidAttribute(bool _lockAccess) {
        if (_lockAccess) {
            eidMutex_.lock();
        } else {
            eidMutex_.unlock();
        }
    }
    void lockImeiAttribute(bool _lockAccess) {
        if (_lockAccess) {
            imeiMutex_.lock();
        } else {
            imeiMutex_.unlock();
        }
    }
    void lockProfilesAttribute(bool _lockAccess) {
        if (_lockAccess) {
            profilesMutex_.lock();
        } else {
            profilesMutex_.unlock();
        }
    }
    void lockPsimNetworkAttribute(bool _lockAccess) {
        if (_lockAccess) {
            psimNetworkMutex_.lock();
        } else {
            psimNetworkMutex_.unlock();
        }
    }

protected:
    /**
     * Defines properties for storing the ClientIds of clients / proxies that have
     * subscribed to the selective broadcasts
     */
    std::recursive_mutex csimMemorySpaceMutex_;
    std::recursive_mutex csimNetworkMutex_;
    std::recursive_mutex eidMutex_;
    std::recursive_mutex imeiMutex_;
    std::recursive_mutex profilesMutex_;
    std::recursive_mutex psimNetworkMutex_;

};

/**
 * Defines the necessary callbacks to handle remote set events related to the attributes
 * defined in the IDL description for SimProfileSelector.
 * For each attribute two callbacks are defined:
 * - a verification callback that allows to verify the requested value and to prevent setting
 *   e.g. an invalid value ("onRemoteSet<AttributeName>").
 * - an action callback to do local work after the attribute value has been changed
 *   ("onRemote<AttributeName>Changed").
 *
 * This class and the one below are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SimProfileSelectorStubRemoteEvent
{
public:
    virtual ~SimProfileSelectorStubRemoteEvent() { }

};

/**
 * Defines the interface that must be implemented by any class that should provide
 * the service SimProfileSelector to remote clients.
 * This class and the one above are the ones an application developer needs to have
 * a look at if he wants to implement a service.
 */
class SimProfileSelectorStub
    : public virtual CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>
{
public:
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult _modifypin)> changePinReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult _dataConfig)> configureDataConnectionReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult _roamingconfig)> configureProfileRoamingReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult _removepin)> disablePinReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult _setpin)> enablePinReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult _deleteall, std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid > _iccid)> requestDeleteAllProfilesReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult _deleteresult)> requestDeleteSimProfileReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult _disableResult)> requestDisableSimProfileReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult _enableResult)> requestEnableSimProfileReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult _acresult)> sendActivationCodeReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult _checkpuk)> unblockPinReply_t;
    typedef std::function<void (::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult _checkpin)> verifyPinReply_t;

    virtual ~SimProfileSelectorStub() {}
    void lockInterfaceVersionAttribute(bool _lockAccess) { static_cast<void>(_lockAccess); }
    bool hasElement(const uint32_t _id) const {
        return (_id < 19);
    }
    virtual const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) = 0;

    /*
     * description: 
     * Standard[en]=WAVE broadcasts the result of the download and installation the consumer SIM profile started with the sendActivationCode method
     * SPP subscribes to this broadcast after sending an activation code to start the download process
     */
    /// Sends a broadcast event for downloadAndInstallResult.
    virtual void fireDownloadAndInstallResultEvent(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activationCode, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult &_installationresult) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->fireDownloadAndInstallResultEvent(_iccid, _activationCode, _installationresult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
     */
    /// This is the method that will be called on remote calls on the method changePin.
    virtual void changePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _oldPin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, changePinReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
     */
    /// This is the method that will be called on remote calls on the method configureDataConnection.
    virtual void configureDataConnection(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _hotspotActive, configureDataConnectionReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
     */
    /// This is the method that will be called on remote calls on the method configureProfileRoaming.
    virtual void configureProfileRoaming(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _roamingActive, configureProfileRoamingReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
     */
    /// This is the method that will be called on remote calls on the method disablePin.
    virtual void disablePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, disablePinReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
     */
    /// This is the method that will be called on remote calls on the method enablePin.
    virtual void enablePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, enablePinReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
     */
    /// This is the method that will be called on remote calls on the method requestDeleteAllProfiles.
    virtual void requestDeleteAllProfiles(const std::shared_ptr<CommonAPI::ClientId> _client, requestDeleteAllProfilesReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
     */
    /// This is the method that will be called on remote calls on the method requestDeleteSimProfile.
    virtual void requestDeleteSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestDeleteSimProfileReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
     */
    /// This is the method that will be called on remote calls on the method requestDisableSimProfile.
    virtual void requestDisableSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestDisableSimProfileReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
     * (asterisk) consumer SIM profile
     */
    /// This is the method that will be called on remote calls on the method requestEnableSimProfile.
    virtual void requestEnableSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestEnableSimProfileReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
     */
    /// This is the method that will be called on remote calls on the method sendActivationCode.
    virtual void sendActivationCode(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode _activation, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode _confirmationCode, sendActivationCodeReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
     */
    /// This is the method that will be called on remote calls on the method unblockPin.
    virtual void unblockPin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk _puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, unblockPinReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
     */
    /// This is the method that will be called on remote calls on the method verifyPin.
    virtual void verifyPin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, verifyPinReply_t _reply) = 0;
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    /// Provides getter access to the attribute csimMemorySpace
    virtual const int64_t &getCsimMemorySpaceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCsimMemorySpaceAttributeChanged(int64_t _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCsimMemorySpaceAttributeChanged(_value);
    }
    void lockCsimMemorySpaceAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCsimMemorySpaceAttribute(_lockAccess);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    /// Provides getter access to the attribute csimNetwork
    virtual const std::string &getCsimNetworkAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireCsimNetworkAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireCsimNetworkAttributeChanged(_value);
    }
    void lockCsimNetworkAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockCsimNetworkAttribute(_lockAccess);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    /// Provides getter access to the attribute eid
    virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &getEidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireEidAttributeChanged(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireEidAttributeChanged(_value);
    }
    void lockEidAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockEidAttribute(_lockAccess);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    /// Provides getter access to the attribute imei
    virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &getImeiAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireImeiAttributeChanged(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireImeiAttributeChanged(_value);
    }
    void lockImeiAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockImeiAttribute(_lockAccess);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    /// Provides getter access to the attribute profiles
    virtual const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &getProfilesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void fireProfilesAttributeChanged(std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->fireProfilesAttributeChanged(_value);
    }
    void lockProfilesAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockProfilesAttribute(_lockAccess);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    /// Provides getter access to the attribute psimNetwork
    virtual const std::string &getPsimNetworkAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) = 0;
    /// sets attribute with the given value and propagates it to the adapter
    virtual void firePsimNetworkAttributeChanged(std::string _value) {
    auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
    if (stubAdapter)
        stubAdapter->firePsimNetworkAttributeChanged(_value);
    }
    void lockPsimNetworkAttribute(bool _lockAccess) {
        auto stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if (stubAdapter)
            stubAdapter->lockPsimNetworkAttribute(_lockAccess);
    }


    using CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::initStubAdapter;
    typedef CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::StubAdapterType StubAdapterType;
    typedef CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::RemoteEventHandlerType RemoteEventHandlerType;
    typedef SimProfileSelectorStubRemoteEvent RemoteEventType;
    typedef ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector StubInterface;
};

} // namespace simprofileselector
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de
} // namespace v3


// Compatibility
namespace v3_0 = v3;

#endif // V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_HPP_
