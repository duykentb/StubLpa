/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_DEFAULT_HPP_
#define V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_DEFAULT_HPP_


#include <CommonAPI/Export.hpp>

#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelectorStub.hpp>
#include <cassert>
#include <sstream>

# if defined(_MSC_VER)
#  if _MSC_VER >= 1300
/*
 * Diamond inheritance is used for the CommonAPI::Proxy base class.
 * The Microsoft compiler put warning (C4250) using a desired c++ feature: "Delegating to a sister class"
 * A powerful technique that arises from using virtual inheritance is to delegate a method from a class in another class
 * by using a common abstract base class. This is also called cross delegation.
 */
#    pragma warning( disable : 4250 )
#  endif
# endif

namespace v3 {
namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselector {

/**
 * Provides a default implementation for SimProfileSelectorStubRemoteEvent and
 * SimProfileSelectorStub. Method callbacks have an empty implementation,
 * remote set calls on attributes will always change the value of the attribute
 * to the one received.
 *
 * Override this stub if you only want to provide a subset of the functionality
 * that would be defined for this service, and/or if you do not need any non-default
 * behaviour.
 */
class COMMONAPI_EXPORT_CLASS_EXPLICIT SimProfileSelectorStubDefault
    : public virtual SimProfileSelectorStub {
public:
    COMMONAPI_EXPORT SimProfileSelectorStubDefault()
        : remoteEventHandler_(this),
          interfaceVersion_(SimProfileSelector::getInterfaceVersion()) {
    }

    COMMONAPI_EXPORT const CommonAPI::Version& getInterfaceVersion(std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return interfaceVersion_;
    }

    COMMONAPI_EXPORT SimProfileSelectorStubRemoteEvent* initStubAdapter(const std::shared_ptr< SimProfileSelectorStubAdapter> &_adapter) {
        CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_ = _adapter;
        return &remoteEventHandler_;
    }

    /*
     * description: 
     * Standard[en]=WAVE broadcasts the result of the download and installation the consumer SIM profile started with the sendActivationCode method
     * SPP subscribes to this broadcast after sending an activation code to start the download process
     */
    COMMONAPI_EXPORT virtual void fireDownloadAndInstallResultEvent(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activationCode, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult &_installationresult) {
        SimProfileSelectorStub::fireDownloadAndInstallResultEvent(_iccid, _activationCode, _installationresult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
     */
    COMMONAPI_EXPORT virtual void changePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _oldPin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, changePinReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_oldPin;
        (void)_newPin;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult modifypin = {};
        _reply(modifypin);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
     */
    COMMONAPI_EXPORT virtual void configureDataConnection(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _hotspotActive, configureDataConnectionReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_hotspotActive;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult dataConfig = {};
        _reply(dataConfig);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
     */
    COMMONAPI_EXPORT virtual void configureProfileRoaming(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _roamingActive, configureProfileRoamingReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_roamingActive;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult roamingconfig = {};
        _reply(roamingconfig);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
     */
    COMMONAPI_EXPORT virtual void disablePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, disablePinReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_pin;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult removepin = {};
        _reply(removepin);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
     */
    COMMONAPI_EXPORT virtual void enablePin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, enablePinReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_pin;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult setpin = {};
        _reply(setpin);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
     */
    COMMONAPI_EXPORT virtual void requestDeleteAllProfiles(const std::shared_ptr<CommonAPI::ClientId> _client, requestDeleteAllProfilesReply_t _reply) {
        (void)_client;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult deleteall = {};
        std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid > iccid = {};
        _reply(deleteall, iccid);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
     */
    COMMONAPI_EXPORT virtual void requestDeleteSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestDeleteSimProfileReply_t _reply) {
        (void)_client;
        (void)_iccid;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult deleteresult = {};
        _reply(deleteresult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
     */
    COMMONAPI_EXPORT virtual void requestDisableSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestDisableSimProfileReply_t _reply) {
        (void)_client;
        (void)_iccid;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult disableResult = {};
        _reply(disableResult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
     * (asterisk) consumer SIM profile
     */
    COMMONAPI_EXPORT virtual void requestEnableSimProfile(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, requestEnableSimProfileReply_t _reply) {
        (void)_client;
        (void)_iccid;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult enableResult = {};
        _reply(enableResult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
     */
    COMMONAPI_EXPORT virtual void sendActivationCode(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode _activation, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode _confirmationCode, sendActivationCodeReply_t _reply) {
        (void)_client;
        (void)_activation;
        (void)_confirmationCode;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult acresult = {};
        _reply(acresult);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
     */
    COMMONAPI_EXPORT virtual void unblockPin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk _puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, unblockPinReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_puk;
        (void)_newPin;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult checkpuk = {};
        _reply(checkpuk);
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
     */
    COMMONAPI_EXPORT virtual void verifyPin(const std::shared_ptr<CommonAPI::ClientId> _client, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, verifyPinReply_t _reply) {
        (void)_client;
        (void)_iccid;
        (void)_pin;
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult checkpin = {};
        _reply(checkpin);
    }
    COMMONAPI_EXPORT virtual const int64_t &getCsimMemorySpaceAttribute() {
        return csimMemorySpaceAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const int64_t &getCsimMemorySpaceAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getCsimMemorySpaceAttribute();
    }
    COMMONAPI_EXPORT virtual void setCsimMemorySpaceAttribute(int64_t _value) {
        const bool valueChanged = trySetCsimMemorySpaceAttribute(std::move(_value));
        if (valueChanged) {
            fireCsimMemorySpaceAttributeChanged(csimMemorySpaceAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const std::string &getCsimNetworkAttribute() {
        return csimNetworkAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::string &getCsimNetworkAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getCsimNetworkAttribute();
    }
    COMMONAPI_EXPORT virtual void setCsimNetworkAttribute(std::string _value) {
        const bool valueChanged = trySetCsimNetworkAttribute(std::move(_value));
        if (valueChanged) {
            fireCsimNetworkAttributeChanged(csimNetworkAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &getEidAttribute() {
        return eidAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &getEidAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getEidAttribute();
    }
    COMMONAPI_EXPORT virtual void setEidAttribute(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid _value) {
        const bool valueChanged = trySetEidAttribute(std::move(_value));
        if (valueChanged) {
            fireEidAttributeChanged(eidAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &getImeiAttribute() {
        return imeiAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &getImeiAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getImeiAttribute();
    }
    COMMONAPI_EXPORT virtual void setImeiAttribute(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei _value) {
        const bool valueChanged = trySetImeiAttribute(std::move(_value));
        if (valueChanged) {
            fireImeiAttributeChanged(imeiAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &getProfilesAttribute() {
        return profilesAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &getProfilesAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getProfilesAttribute();
    }
    COMMONAPI_EXPORT virtual void setProfilesAttribute(std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > _value) {
        const bool valueChanged = trySetProfilesAttribute(std::move(_value));
        if (valueChanged) {
            fireProfilesAttributeChanged(profilesAttributeValue_);
        }
    }
    COMMONAPI_EXPORT virtual const std::string &getPsimNetworkAttribute() {
        return psimNetworkAttributeValue_;
    }
    COMMONAPI_EXPORT virtual const std::string &getPsimNetworkAttribute(const std::shared_ptr<CommonAPI::ClientId> _client) {
        (void)_client;
        return getPsimNetworkAttribute();
    }
    COMMONAPI_EXPORT virtual void setPsimNetworkAttribute(std::string _value) {
        const bool valueChanged = trySetPsimNetworkAttribute(std::move(_value));
        if (valueChanged) {
            firePsimNetworkAttributeChanged(psimNetworkAttributeValue_);
        }
    }


protected:
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    COMMONAPI_EXPORT virtual bool trySetCsimMemorySpaceAttribute(int64_t _value) {
        if (!validateCsimMemorySpaceAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockCsimMemorySpaceAttribute(true);
            valueChanged = (csimMemorySpaceAttributeValue_ != _value);
            csimMemorySpaceAttributeValue_ = std::move(_value);
            stubAdapter->lockCsimMemorySpaceAttribute(false);
        } else {
            valueChanged = (csimMemorySpaceAttributeValue_ != _value);
            csimMemorySpaceAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateCsimMemorySpaceAttributeRequestedValue(const int64_t &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    COMMONAPI_EXPORT virtual bool trySetCsimNetworkAttribute(std::string _value) {
        if (!validateCsimNetworkAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockCsimNetworkAttribute(true);
            valueChanged = (csimNetworkAttributeValue_ != _value);
            csimNetworkAttributeValue_ = std::move(_value);
            stubAdapter->lockCsimNetworkAttribute(false);
        } else {
            valueChanged = (csimNetworkAttributeValue_ != _value);
            csimNetworkAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateCsimNetworkAttributeRequestedValue(const std::string &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    COMMONAPI_EXPORT virtual bool trySetEidAttribute(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid _value) {
        if (!validateEidAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockEidAttribute(true);
            valueChanged = (eidAttributeValue_ != _value);
            eidAttributeValue_ = std::move(_value);
            stubAdapter->lockEidAttribute(false);
        } else {
            valueChanged = (eidAttributeValue_ != _value);
            eidAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateEidAttributeRequestedValue(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    COMMONAPI_EXPORT virtual bool trySetImeiAttribute(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei _value) {
        if (!validateImeiAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockImeiAttribute(true);
            valueChanged = (imeiAttributeValue_ != _value);
            imeiAttributeValue_ = std::move(_value);
            stubAdapter->lockImeiAttribute(false);
        } else {
            valueChanged = (imeiAttributeValue_ != _value);
            imeiAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateImeiAttributeRequestedValue(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    COMMONAPI_EXPORT virtual bool trySetProfilesAttribute(std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > _value) {
        if (!validateProfilesAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockProfilesAttribute(true);
            valueChanged = (profilesAttributeValue_ != _value);
            profilesAttributeValue_ = std::move(_value);
            stubAdapter->lockProfilesAttribute(false);
        } else {
            valueChanged = (profilesAttributeValue_ != _value);
            profilesAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validateProfilesAttributeRequestedValue(const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &_value) {
        (void)_value;
        return true;
    }
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    COMMONAPI_EXPORT virtual bool trySetPsimNetworkAttribute(std::string _value) {
        if (!validatePsimNetworkAttributeRequestedValue(_value))
            return false;

        bool valueChanged;
        std::shared_ptr<SimProfileSelectorStubAdapter> stubAdapter = CommonAPI::Stub<SimProfileSelectorStubAdapter, SimProfileSelectorStubRemoteEvent>::stubAdapter_.lock();
        if(stubAdapter) {
            stubAdapter->lockPsimNetworkAttribute(true);
            valueChanged = (psimNetworkAttributeValue_ != _value);
            psimNetworkAttributeValue_ = std::move(_value);
            stubAdapter->lockPsimNetworkAttribute(false);
        } else {
            valueChanged = (psimNetworkAttributeValue_ != _value);
            psimNetworkAttributeValue_ = std::move(_value);
        }

       return valueChanged;
    }
    COMMONAPI_EXPORT virtual bool validatePsimNetworkAttributeRequestedValue(const std::string &_value) {
        (void)_value;
        return true;
    }
    class COMMONAPI_EXPORT_CLASS_EXPLICIT RemoteEventHandler: public virtual SimProfileSelectorStubRemoteEvent {
    public:
        COMMONAPI_EXPORT RemoteEventHandler(SimProfileSelectorStubDefault *_defaultStub)
            : 
              defaultStub_(_defaultStub) {
        }

        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
         */
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
         */
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
         */
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
         */
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
         */
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
         * (at)example: 0 - 5
         */

    private:
        SimProfileSelectorStubDefault *defaultStub_;
    };
protected:
    SimProfileSelectorStubDefault::RemoteEventHandler remoteEventHandler_;

private:

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    int64_t csimMemorySpaceAttributeValue_ {};
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    std::string csimNetworkAttributeValue_ {};
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid eidAttributeValue_ {};
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei imeiAttributeValue_ {};
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > profilesAttributeValue_ {};
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    std::string psimNetworkAttributeValue_ {};

    CommonAPI::Version interfaceVersion_;
};

} // namespace simprofileselector
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de
} // namespace v3


// Compatibility
namespace v3_0 = v3;

#endif // V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_STUB_DEFAULT
