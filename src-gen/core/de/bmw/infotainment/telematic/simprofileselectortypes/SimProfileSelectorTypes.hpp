/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
/*
 * details: 
 * The name of this type collection will be removed once Franca supports anonymous type collections.
 */
#ifndef DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTORTYPES_Sim_Profile_Selector_Types_HPP_
#define DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTORTYPES_Sim_Profile_Selector_Types_HPP_



#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/Deployment.hpp>
#include <CommonAPI/InputStream.hpp>
#include <CommonAPI/OutputStream.hpp>
#include <CommonAPI/Struct.hpp>
#include <CommonAPI/Types.hpp>
#include <cstdint>
#include <string>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselectortypes {

struct SimProfileSelectorTypes {
    /*
     * description: 
     * Standard[en]=Activation code which is required to download a CSIM profile from the SM-DP+
     */
    typedef std::string ActivationCode;
    /*
     * description: 
     * Standard[en]=Confirmation code which may be required to download a CSIM profile from the SM-DP+
     */
    typedef std::string ConfirmationCode;
    /*
     * description: 
     * Standard[en]=the EID of a CSIM
     */
    typedef std::string Eid;
    /*
     * description: 
     * Standard[en]=the ICCID of a CSIM profile
     */
    typedef std::string Iccid;
    /*
     * description: 
     * Standard[en]=the IMEI of a CSIM
     */
    typedef std::string Imei;
    /*
     * description: 
     * Standard[en]=the PIN for cSIM profiles
     */
    typedef std::string Pin;
    /*
     * description: 
     * Standard[en]=the PUK for cSIM profiles
     */
    typedef std::string Puk;
    /*
     * description: 
     * Standard[en]=Timestamp for the relevant event or data-generation - in milliseconds since 01.01.1970 00:00:00:000 UTC
     */
    typedef int64_t Timestamp;
    
    struct ConfigureProfileHotspotResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * Activation code successfully sent
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error during hotspot activation/deactivation
             */
            HOTSPOT_CONFIG_FAILED = 1
        };
    
        ConfigureProfileHotspotResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        ConfigureProfileHotspotResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::HOTSPOT_CONFIG_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ConfigureProfileHotspotResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ConfigureProfileHotspotResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ConfigureProfileHotspotResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ConfigureProfileHotspotResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ConfigureProfileHotspotResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ConfigureProfileHotspotResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::HOTSPOT_CONFIG_FAILED): return "HOTSPOT_CONFIG_FAILED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct ConfigureProfileRoamingResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            SUCCESS = 0,
            /*
             * description: 
             * Error during roaming configuration
             */
            ROAMING_CONFIG_FAILED = 1
        };
    
        ConfigureProfileRoamingResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        ConfigureProfileRoamingResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::ROAMING_CONFIG_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ConfigureProfileRoamingResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ConfigureProfileRoamingResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ConfigureProfileRoamingResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ConfigureProfileRoamingResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ConfigureProfileRoamingResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ConfigureProfileRoamingResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::ROAMING_CONFIG_FAILED): return "ROAMING_CONFIG_FAILED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct CSimProfileStatus : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            ENABLED = 0,
            DISABLED = 1
        };
    
        CSimProfileStatus()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::ENABLED)) {}
        CSimProfileStatus(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::ENABLED):
                case static_cast< uint8_t>(Literal::DISABLED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const CSimProfileStatus &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const CSimProfileStatus &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const CSimProfileStatus &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const CSimProfileStatus &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const CSimProfileStatus &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const CSimProfileStatus &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::ENABLED): return "ENABLED";
            case static_cast< uint8_t>(Literal::DISABLED): return "DISABLED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct DisablePinResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * PIN successfully disabled
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error occured during PIN disabling
             */
            FAILED = 1,
            /*
             * description: 
             * PIN uses invalid characters
             */
            INVALID_PIN = 2,
            /*
             * description: 
             * The PIN is wrong
             */
            WRONG_PIN = 3
        };
    
        DisablePinResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        DisablePinResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::INVALID_PIN):
                case static_cast< uint8_t>(Literal::WRONG_PIN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const DisablePinResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const DisablePinResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const DisablePinResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const DisablePinResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const DisablePinResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const DisablePinResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::INVALID_PIN): return "INVALID_PIN";
            case static_cast< uint8_t>(Literal::WRONG_PIN): return "WRONG_PIN";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct EnablePinResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * PIN successfully enabled
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error occured during PIN enabling
             */
            FAILED = 1,
            /*
             * description: 
             * The chosen PIN uses invalid characters
             */
            INVALID_PIN = 2
        };
    
        EnablePinResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        EnablePinResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::INVALID_PIN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const EnablePinResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const EnablePinResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const EnablePinResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const EnablePinResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const EnablePinResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const EnablePinResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::INVALID_PIN): return "INVALID_PIN";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct InstallationErrors : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * The new profile was downloaded and installed successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error occured during profile download/installation
             */
            FAILED = 1,
            /*
             * description: 
             * Another activation was already sent to the vehicle and user and used for downloading a profile
             */
            PROFILE_ALREADY_EXISTS_FOR_USER = 2,
            /*
             * description: 
             * Failed to connect to network, e.g. BMW SIM has no network
             */
            PROFILE_DOWNLOAD_FAILED_NO_NETWORK_CONNECTION = 3,
            /*
             * description: 
             * BMW SIM has network, but communication / authentication with Netscaler failed
             */
            PROFILE_DOWNLOAD_FAILED_NETSCALER_COMMUNICATION_ERROR = 4,
            /*
             * description: 
             * BMW SIM has network, communication with Netscaler was successful, but establishment of proxy connection to CESIM Proxy failed
             */
            PROFILE_DOWNLOAD_FAILED_BACKEND_PROXY_COMMUNICATION_ERROR = 5,
            /*
             * description: 
             * BMW SIM has network, communication with Netscaler was successful, communication to CESIM Proxy was successful, but communication with MNO's SMDP+ server failed
             */
            PROFILE_DOWNLOAD_FAILED_SMDP_COMMUNICATION_ERROR = 6,
            /*
             * description: 
             * BMW SIM has network, communication with Netscaler was successful, communication to CESIM Proxy was successful, but communication with MNO's SMDP+ was successful, but an error (e.g. authentication error) in the download sequence occurred
             */
            PROFILE_DOWNLOAD_FAILED_SMDP_DOWNLOAD_ERROR = 7,
            /*
             * description: 
             * profile was successfully downloaded, but installation failed
             */
            PROFILE_INSTALLATION_FAILED = 8
        };
    
        InstallationErrors()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        InstallationErrors(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::PROFILE_ALREADY_EXISTS_FOR_USER):
                case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_NO_NETWORK_CONNECTION):
                case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_NETSCALER_COMMUNICATION_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_BACKEND_PROXY_COMMUNICATION_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_SMDP_COMMUNICATION_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_SMDP_DOWNLOAD_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_INSTALLATION_FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const InstallationErrors &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const InstallationErrors &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const InstallationErrors &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const InstallationErrors &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const InstallationErrors &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const InstallationErrors &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::PROFILE_ALREADY_EXISTS_FOR_USER): return "PROFILE_ALREADY_EXISTS_FOR_USER";
            case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_NO_NETWORK_CONNECTION): return "PROFILE_DOWNLOAD_FAILED_NO_NETWORK_CONNECTION";
            case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_NETSCALER_COMMUNICATION_ERROR): return "PROFILE_DOWNLOAD_FAILED_NETSCALER_COMMUNICATION_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_BACKEND_PROXY_COMMUNICATION_ERROR): return "PROFILE_DOWNLOAD_FAILED_BACKEND_PROXY_COMMUNICATION_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_SMDP_COMMUNICATION_ERROR): return "PROFILE_DOWNLOAD_FAILED_SMDP_COMMUNICATION_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_DOWNLOAD_FAILED_SMDP_DOWNLOAD_ERROR): return "PROFILE_DOWNLOAD_FAILED_SMDP_DOWNLOAD_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_INSTALLATION_FAILED): return "PROFILE_INSTALLATION_FAILED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct RequestDeleteAllResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * All the profiles were deleted successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * The deletion of all SIM profiles failed
             */
            DELETE_ALL_ERROR = 1
        };
    
        RequestDeleteAllResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        RequestDeleteAllResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::DELETE_ALL_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RequestDeleteAllResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RequestDeleteAllResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RequestDeleteAllResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RequestDeleteAllResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RequestDeleteAllResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RequestDeleteAllResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::DELETE_ALL_ERROR): return "DELETE_ALL_ERROR";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct RequestDeleteSimProfileResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * The profile was deleted successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * The deletion of the profile failed
             */
            DELETE_ERROR = 1,
            /*
             * description: 
             * The profile is not available
             */
            PROFILE_NOT_FOUND = 2,
            /*
             * description: 
             * cSIM profile is not in DISABLED state and cannot be deleted
             */
            STATE_ERROR = 3,
            /*
             * description: 
             * Due to profile policy rules, delete of the profile is not allowed
             */
            DELETE_NOT_ALLOWED = 4
        };
    
        RequestDeleteSimProfileResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        RequestDeleteSimProfileResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::DELETE_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND):
                case static_cast< uint8_t>(Literal::STATE_ERROR):
                case static_cast< uint8_t>(Literal::DELETE_NOT_ALLOWED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RequestDeleteSimProfileResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RequestDeleteSimProfileResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RequestDeleteSimProfileResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RequestDeleteSimProfileResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RequestDeleteSimProfileResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RequestDeleteSimProfileResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::DELETE_ERROR): return "DELETE_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND): return "PROFILE_NOT_FOUND";
            case static_cast< uint8_t>(Literal::STATE_ERROR): return "STATE_ERROR";
            case static_cast< uint8_t>(Literal::DELETE_NOT_ALLOWED): return "DELETE_NOT_ALLOWED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct RequestDisableSimProfileResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * The profile was disabled successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * The disable request failed
             */
            DISABLE_ERROR = 1,
            /*
             * description: 
             * The profile is not available
             */
            PROFILE_NOT_FOUND = 2,
            /*
             * description: 
             * cSIM profile is not in ENABLED state and cannot be disabled
             */
            STATE_ERROR = 3,
            /*
             * description: 
             * Due to profile policy rules, disable of the profile is not allowed
             */
            DISABLE_NOT_ALLOWED = 4
        };
    
        RequestDisableSimProfileResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        RequestDisableSimProfileResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::DISABLE_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND):
                case static_cast< uint8_t>(Literal::STATE_ERROR):
                case static_cast< uint8_t>(Literal::DISABLE_NOT_ALLOWED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RequestDisableSimProfileResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RequestDisableSimProfileResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RequestDisableSimProfileResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RequestDisableSimProfileResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RequestDisableSimProfileResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RequestDisableSimProfileResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::DISABLE_ERROR): return "DISABLE_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND): return "PROFILE_NOT_FOUND";
            case static_cast< uint8_t>(Literal::STATE_ERROR): return "STATE_ERROR";
            case static_cast< uint8_t>(Literal::DISABLE_NOT_ALLOWED): return "DISABLE_NOT_ALLOWED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct RequestEnableSimProfileResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * The profile was enabled successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * The enable request failed
             */
            ENABLE_ERROR = 1,
            /*
             * description: 
             * The profile is not available
             */
            PROFILE_NOT_FOUND = 2,
            /*
             * description: 
             * CSIM profile is not in DISABLED state
             */
            STATE_ERROR = 3
        };
    
        RequestEnableSimProfileResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        RequestEnableSimProfileResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::ENABLE_ERROR):
                case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND):
                case static_cast< uint8_t>(Literal::STATE_ERROR):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const RequestEnableSimProfileResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const RequestEnableSimProfileResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const RequestEnableSimProfileResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const RequestEnableSimProfileResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const RequestEnableSimProfileResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const RequestEnableSimProfileResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::ENABLE_ERROR): return "ENABLE_ERROR";
            case static_cast< uint8_t>(Literal::PROFILE_NOT_FOUND): return "PROFILE_NOT_FOUND";
            case static_cast< uint8_t>(Literal::STATE_ERROR): return "STATE_ERROR";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct SendActivationCodeResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * Activation code successfully sent
             */
            SUCCESS = 0,
            /*
             * description: 
             * No response received from WAVE
             */
            NO_RESPONSE = 1,
            /*
             * description: 
             * sendActivationCode returned an error
             */
            FAILED = 2
        };
    
        SendActivationCodeResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        SendActivationCodeResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::NO_RESPONSE):
                case static_cast< uint8_t>(Literal::FAILED):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const SendActivationCodeResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const SendActivationCodeResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const SendActivationCodeResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const SendActivationCodeResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const SendActivationCodeResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const SendActivationCodeResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::NO_RESPONSE): return "NO_RESPONSE";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct UnblockPinResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * PUK is correct
             */
            SUCCESS = 0,
            /*
             * description: 
             * PIN updated correctly
             */
            PIN_UPDATED_SUCCESS = 1,
            /*
             * description: 
             * Unknown error occured during profile download/installation
             */
            FAILED = 2,
            /*
             * description: 
             * User needs to set a new PIN
             */
            NEW_PIN_REQUIRED = 3,
            /*
             * description: 
             * PUK uses invalid characters
             */
            INVALID_PUK = 4,
            /*
             * description: 
             * The PUK is wrong
             */
            WRONG_PUK = 5
        };
    
        UnblockPinResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        UnblockPinResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::PIN_UPDATED_SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::NEW_PIN_REQUIRED):
                case static_cast< uint8_t>(Literal::INVALID_PUK):
                case static_cast< uint8_t>(Literal::WRONG_PUK):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const UnblockPinResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const UnblockPinResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const UnblockPinResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const UnblockPinResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const UnblockPinResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const UnblockPinResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::PIN_UPDATED_SUCCESS): return "PIN_UPDATED_SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::NEW_PIN_REQUIRED): return "NEW_PIN_REQUIRED";
            case static_cast< uint8_t>(Literal::INVALID_PUK): return "INVALID_PUK";
            case static_cast< uint8_t>(Literal::WRONG_PUK): return "WRONG_PUK";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct VerifyPinResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * PIN is correct
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error occured during PIN verification
             */
            FAILED = 1,
            /*
             * description: 
             * PIN uses invalid characters
             */
            INVALID_PIN = 2,
            /*
             * description: 
             * The PIN is wrong
             */
            WRONG_PIN = 3
        };
    
        VerifyPinResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        VerifyPinResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::INVALID_PIN):
                case static_cast< uint8_t>(Literal::WRONG_PIN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const VerifyPinResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const VerifyPinResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const VerifyPinResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const VerifyPinResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const VerifyPinResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const VerifyPinResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::INVALID_PIN): return "INVALID_PIN";
            case static_cast< uint8_t>(Literal::WRONG_PIN): return "WRONG_PIN";
            default: return "UNDEFINED";
            }
        }
    };
    
    struct ChangePinResult : CommonAPI::Enumeration< uint8_t> {
        enum Literal : uint8_t {
            /*
             * description: 
             * PIN changed successfully
             */
            SUCCESS = 0,
            /*
             * description: 
             * Unknown error occured during PIN changed
             */
            FAILED = 1,
            /*
             * description: 
             * The new PIN has invalid characters
             */
            INVALID_NEW_PIN = 2,
            /*
             * description: 
             * The new PIN has invalid characters
             */
            INVALID_OLD_PIN = 3,
            /*
             * description: 
             * The old PIN is wrong
             */
            WRONG_OLD_PIN = 4
        };
    
        ChangePinResult()
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(Literal::SUCCESS)) {}
        ChangePinResult(Literal _literal)
            : CommonAPI::Enumeration< uint8_t>(static_cast< uint8_t>(_literal)) {}
    
        inline bool validate() const {
            switch (value_) {
                case static_cast< uint8_t>(Literal::SUCCESS):
                case static_cast< uint8_t>(Literal::FAILED):
                case static_cast< uint8_t>(Literal::INVALID_NEW_PIN):
                case static_cast< uint8_t>(Literal::INVALID_OLD_PIN):
                case static_cast< uint8_t>(Literal::WRONG_OLD_PIN):
                return true;
            default:
                return false;
            }
        }
    
        inline bool operator==(const ChangePinResult &_other) const { return (value_ == _other.value_); }
        inline bool operator!=(const ChangePinResult &_other) const { return (value_ != _other.value_); }
        inline bool operator<=(const ChangePinResult &_other) const { return (value_ <= _other.value_); }
        inline bool operator>=(const ChangePinResult &_other) const { return (value_ >= _other.value_); }
        inline bool operator<(const ChangePinResult &_other) const { return (value_ < _other.value_); }
        inline bool operator>(const ChangePinResult &_other) const { return (value_ > _other.value_); }
    
        inline bool operator==(const Literal &_value) const { return (value_ == static_cast< uint8_t>(_value)); }
        inline bool operator!=(const Literal &_value) const { return (value_ != static_cast< uint8_t>(_value)); }
        inline bool operator<=(const Literal &_value) const { return (value_ <= static_cast< uint8_t>(_value)); }
        inline bool operator>=(const Literal &_value) const { return (value_ >= static_cast< uint8_t>(_value)); }
        inline bool operator<(const Literal &_value) const { return (value_ < static_cast< uint8_t>(_value)); }
        inline bool operator>(const Literal &_value) const { return (value_ > static_cast< uint8_t>(_value)); }
    
        const char* toString() const noexcept
        {
            switch(value_)
            {
            case static_cast< uint8_t>(Literal::SUCCESS): return "SUCCESS";
            case static_cast< uint8_t>(Literal::FAILED): return "FAILED";
            case static_cast< uint8_t>(Literal::INVALID_NEW_PIN): return "INVALID_NEW_PIN";
            case static_cast< uint8_t>(Literal::INVALID_OLD_PIN): return "INVALID_OLD_PIN";
            case static_cast< uint8_t>(Literal::WRONG_OLD_PIN): return "WRONG_OLD_PIN";
            default: return "UNDEFINED";
            }
        }
    };
    /*
     * description: 
     * Standard[en]=The possible result of the send activation code request
     */
    struct ActivationCodeResult : CommonAPI::Struct< SendActivationCodeResult, uint16_t> {
    
        ActivationCodeResult()
        {
            std::get< 0>(values_) = SendActivationCodeResult();
            std::get< 1>(values_) = 0u;
        }
        ActivationCodeResult(const SendActivationCodeResult &_sendActivationCodeResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _sendActivationCodeResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during send activation code request
         */
        inline const SendActivationCodeResult &getSendActivationCodeResult() const { return std::get< 0>(values_); }
        inline void setSendActivationCodeResult(const SendActivationCodeResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const ActivationCodeResult& _other) const {
        return (getSendActivationCodeResult() == _other.getSendActivationCodeResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const ActivationCodeResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the pin verification
     */
    struct CheckPinResult : CommonAPI::Struct< VerifyPinResult, uint16_t> {
    
        CheckPinResult()
        {
            std::get< 0>(values_) = VerifyPinResult();
            std::get< 1>(values_) = 0u;
        }
        CheckPinResult(const VerifyPinResult &_verifyPinResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _verifyPinResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        inline const VerifyPinResult &getVerifyPinResult() const { return std::get< 0>(values_); }
        inline void setVerifyPinResult(const VerifyPinResult &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const CheckPinResult& _other) const {
        return (getVerifyPinResult() == _other.getVerifyPinResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const CheckPinResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the unblock PIN
     */
    struct CheckPukResult : CommonAPI::Struct< UnblockPinResult, uint16_t> {
    
        CheckPukResult()
        {
            std::get< 0>(values_) = UnblockPinResult();
            std::get< 1>(values_) = 0u;
        }
        CheckPukResult(const UnblockPinResult &_unblockPinResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _unblockPinResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during unblock PIN
         */
        inline const UnblockPinResult &getUnblockPinResult() const { return std::get< 0>(values_); }
        inline void setUnblockPinResult(const UnblockPinResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const CheckPukResult& _other) const {
        return (getUnblockPinResult() == _other.getUnblockPinResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const CheckPukResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=the CSIM profile ICCID paired with its current activation status
     */
    struct CSimProfile : CommonAPI::Struct< Iccid, CSimProfileStatus, Timestamp> {
    
        CSimProfile()
        {
            std::get< 0>(values_) = Iccid();
            std::get< 1>(values_) = CSimProfileStatus();
            std::get< 2>(values_) = Timestamp();
        }
        CSimProfile(const Iccid &_iccid, const CSimProfileStatus &_profileStatus, const Timestamp &_statusTimestamp)
        {
            std::get< 0>(values_) = _iccid;
            std::get< 1>(values_) = _profileStatus;
            std::get< 2>(values_) = _statusTimestamp;
        }
        /*
         * description: 
         * Standard[en]=the ICCID of the CSIM profile
         */
        inline const Iccid &getIccid() const { return std::get< 0>(values_); }
        inline void setIccid(const Iccid &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the current status of the CSIM profile
         */
        inline const CSimProfileStatus &getProfileStatus() const { return std::get< 1>(values_); }
        inline void setProfileStatus(const CSimProfileStatus &_value) { std::get< 1>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=The timestamp when the profile's status was last updated.
         */
        inline const Timestamp &getStatusTimestamp() const { return std::get< 2>(values_); }
        inline void setStatusTimestamp(const Timestamp &_value) { std::get< 2>(values_) = _value; }
        inline bool operator==(const CSimProfile& _other) const {
        return (getIccid() == _other.getIccid() && getProfileStatus() == _other.getProfileStatus() && getStatusTimestamp() == _other.getStatusTimestamp());
        }
        inline bool operator!=(const CSimProfile &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the delete all request
     */
    struct DeleteAllResult : CommonAPI::Struct< RequestDeleteAllResult, uint16_t> {
    
        DeleteAllResult()
        {
            std::get< 0>(values_) = RequestDeleteAllResult();
            std::get< 1>(values_) = 0u;
        }
        DeleteAllResult(const RequestDeleteAllResult &_requestDeleteAllResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _requestDeleteAllResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during delete all
         */
        inline const RequestDeleteAllResult &getRequestDeleteAllResult() const { return std::get< 0>(values_); }
        inline void setRequestDeleteAllResult(const RequestDeleteAllResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const DeleteAllResult& _other) const {
        return (getRequestDeleteAllResult() == _other.getRequestDeleteAllResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const DeleteAllResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the delete request
     */
    struct DeleteResult : CommonAPI::Struct< RequestDeleteSimProfileResult, uint16_t> {
    
        DeleteResult()
        {
            std::get< 0>(values_) = RequestDeleteSimProfileResult();
            std::get< 1>(values_) = 0u;
        }
        DeleteResult(const RequestDeleteSimProfileResult &_requestDeleteSimProfileResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _requestDeleteSimProfileResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during delete
         */
        inline const RequestDeleteSimProfileResult &getRequestDeleteSimProfileResult() const { return std::get< 0>(values_); }
        inline void setRequestDeleteSimProfileResult(const RequestDeleteSimProfileResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const DeleteResult& _other) const {
        return (getRequestDeleteSimProfileResult() == _other.getRequestDeleteSimProfileResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const DeleteResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the disable request
     */
    struct DisableResult : CommonAPI::Struct< RequestDisableSimProfileResult, uint16_t> {
    
        DisableResult()
        {
            std::get< 0>(values_) = RequestDisableSimProfileResult();
            std::get< 1>(values_) = 0u;
        }
        DisableResult(const RequestDisableSimProfileResult &_requestDisableSimProfileResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _requestDisableSimProfileResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during disable
         */
        inline const RequestDisableSimProfileResult &getRequestDisableSimProfileResult() const { return std::get< 0>(values_); }
        inline void setRequestDisableSimProfileResult(const RequestDisableSimProfileResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const DisableResult& _other) const {
        return (getRequestDisableSimProfileResult() == _other.getRequestDisableSimProfileResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const DisableResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the enable request
     */
    struct EnableResult : CommonAPI::Struct< RequestEnableSimProfileResult, uint16_t> {
    
        EnableResult()
        {
            std::get< 0>(values_) = RequestEnableSimProfileResult();
            std::get< 1>(values_) = 0u;
        }
        EnableResult(const RequestEnableSimProfileResult &_requestEnableSimProfileResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _requestEnableSimProfileResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during enable
         */
        inline const RequestEnableSimProfileResult &getRequestEnableSimProfileResult() const { return std::get< 0>(values_); }
        inline void setRequestEnableSimProfileResult(const RequestEnableSimProfileResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const EnableResult& _other) const {
        return (getRequestEnableSimProfileResult() == _other.getRequestEnableSimProfileResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const EnableResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the hotspot configuration
     */
    struct HotspotConfigResult : CommonAPI::Struct< ConfigureProfileHotspotResult, uint16_t> {
    
        HotspotConfigResult()
        {
            std::get< 0>(values_) = ConfigureProfileHotspotResult();
            std::get< 1>(values_) = 0u;
        }
        HotspotConfigResult(const ConfigureProfileHotspotResult &_configureProfileHotspotResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _configureProfileHotspotResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during hotspot configuration
         */
        inline const ConfigureProfileHotspotResult &getConfigureProfileHotspotResult() const { return std::get< 0>(values_); }
        inline void setConfigureProfileHotspotResult(const ConfigureProfileHotspotResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const HotspotConfigResult& _other) const {
        return (getConfigureProfileHotspotResult() == _other.getConfigureProfileHotspotResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const HotspotConfigResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the download and installation request
     */
    struct InstallationResult : CommonAPI::Struct< InstallationErrors, uint16_t> {
    
        InstallationResult()
        {
            std::get< 0>(values_) = InstallationErrors();
            std::get< 1>(values_) = 0u;
        }
        InstallationResult(const InstallationErrors &_installationError, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _installationError;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during download and installation
         */
        inline const InstallationErrors &getInstallationError() const { return std::get< 0>(values_); }
        inline void setInstallationError(const InstallationErrors &_value) { std::get< 0>(values_) = _value; }
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const InstallationResult& _other) const {
        return (getInstallationError() == _other.getInstallationError() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const InstallationResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the change PIN operation
     */
    struct ModifyPinResult : CommonAPI::Struct< ChangePinResult, uint16_t> {
    
        ModifyPinResult()
        {
            std::get< 0>(values_) = ChangePinResult();
            std::get< 1>(values_) = 0u;
        }
        ModifyPinResult(const ChangePinResult &_changePinResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _changePinResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during change PIN operation
         */
        inline const ChangePinResult &getChangePinResult() const { return std::get< 0>(values_); }
        inline void setChangePinResult(const ChangePinResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const ModifyPinResult& _other) const {
        return (getChangePinResult() == _other.getChangePinResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const ModifyPinResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=The possible result of the disable PIN
     */
    struct RemovePinResult : CommonAPI::Struct< DisablePinResult, uint16_t> {
    
        RemovePinResult()
        {
            std::get< 0>(values_) = DisablePinResult();
            std::get< 1>(values_) = 0u;
        }
        RemovePinResult(const DisablePinResult &_disablePinResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _disablePinResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during disable PIN
         */
        inline const DisablePinResult &getDisablePinResult() const { return std::get< 0>(values_); }
        inline void setDisablePinResult(const DisablePinResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const RemovePinResult& _other) const {
        return (getDisablePinResult() == _other.getDisablePinResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const RemovePinResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    struct RoamingConfigResult : CommonAPI::Struct< ConfigureProfileRoamingResult, uint16_t> {
    
        RoamingConfigResult()
        {
            std::get< 0>(values_) = ConfigureProfileRoamingResult();
            std::get< 1>(values_) = 0u;
        }
        RoamingConfigResult(const ConfigureProfileRoamingResult &_configureProfileRoamingResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _configureProfileRoamingResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during roaming configuration
         */
        inline const ConfigureProfileRoamingResult &getConfigureProfileRoamingResult() const { return std::get< 0>(values_); }
        inline void setConfigureProfileRoamingResult(const ConfigureProfileRoamingResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const RoamingConfigResult& _other) const {
        return (getConfigureProfileRoamingResult() == _other.getConfigureProfileRoamingResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const RoamingConfigResult &_other) const {
            return !((*this) == _other);
        }
    
    };
    /*
     * description: 
     * Standard[en]=the possible result of the enable PIN
     */
    struct SetPinResult : CommonAPI::Struct< EnablePinResult, uint16_t> {
    
        SetPinResult()
        {
            std::get< 0>(values_) = EnablePinResult();
            std::get< 1>(values_) = 0u;
        }
        SetPinResult(const EnablePinResult &_enablePinResult, const uint16_t &_csimErrorCode)
        {
            std::get< 0>(values_) = _enablePinResult;
            std::get< 1>(values_) = _csimErrorCode;
        }
        /*
         * description: 
         * Standard[en]=SW error during enable PIN
         */
        inline const EnablePinResult &getEnablePinResult() const { return std::get< 0>(values_); }
        inline void setEnablePinResult(const EnablePinResult &_value) { std::get< 0>(values_) = _value; }
        /*
         * description: 
         * Standard[en]=the 2 byte status code of the CSIM in case of an error, if no CSIM hardware related error, it will be 0.
         */
        inline const uint16_t &getCsimErrorCode() const { return std::get< 1>(values_); }
        inline void setCsimErrorCode(const uint16_t &_value) { std::get< 1>(values_) = _value; }
        inline bool operator==(const SetPinResult& _other) const {
        return (getEnablePinResult() == _other.getEnablePinResult() && getCsimErrorCode() == _other.getCsimErrorCode());
        }
        inline bool operator!=(const SetPinResult &_other) const {
            return !((*this) == _other);
        }
    
    };


static inline const char* getTypeCollectionName() {
    static const char* typeCollectionName = "de.bmw.infotainment.telematic.simprofileselectortypes.SimProfileSelectorTypes";
    return typeCollectionName;
}


}; // struct SimProfileSelectorTypes

} // namespace simprofileselectortypes
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de

namespace CommonAPI {
}


namespace std {
    //Hash for ConfigureProfileHotspotResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfigureProfileHotspotResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfigureProfileHotspotResult& configureProfileHotspotResult) const {
            return static_cast< uint8_t>(configureProfileHotspotResult);
        }
    };
    //Hash for ConfigureProfileRoamingResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfigureProfileRoamingResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfigureProfileRoamingResult& configureProfileRoamingResult) const {
            return static_cast< uint8_t>(configureProfileRoamingResult);
        }
    };
    //Hash for CSimProfileStatus
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfileStatus> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfileStatus& cSimProfileStatus) const {
            return static_cast< uint8_t>(cSimProfileStatus);
        }
    };
    //Hash for DisablePinResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisablePinResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisablePinResult& disablePinResult) const {
            return static_cast< uint8_t>(disablePinResult);
        }
    };
    //Hash for EnablePinResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnablePinResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnablePinResult& enablePinResult) const {
            return static_cast< uint8_t>(enablePinResult);
        }
    };
    //Hash for InstallationErrors
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationErrors> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationErrors& installationErrors) const {
            return static_cast< uint8_t>(installationErrors);
        }
    };
    //Hash for RequestDeleteAllResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDeleteAllResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDeleteAllResult& requestDeleteAllResult) const {
            return static_cast< uint8_t>(requestDeleteAllResult);
        }
    };
    //Hash for RequestDeleteSimProfileResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDeleteSimProfileResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDeleteSimProfileResult& requestDeleteSimProfileResult) const {
            return static_cast< uint8_t>(requestDeleteSimProfileResult);
        }
    };
    //Hash for RequestDisableSimProfileResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDisableSimProfileResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestDisableSimProfileResult& requestDisableSimProfileResult) const {
            return static_cast< uint8_t>(requestDisableSimProfileResult);
        }
    };
    //Hash for RequestEnableSimProfileResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestEnableSimProfileResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RequestEnableSimProfileResult& requestEnableSimProfileResult) const {
            return static_cast< uint8_t>(requestEnableSimProfileResult);
        }
    };
    //Hash for SendActivationCodeResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SendActivationCodeResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SendActivationCodeResult& sendActivationCodeResult) const {
            return static_cast< uint8_t>(sendActivationCodeResult);
        }
    };
    //Hash for UnblockPinResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::UnblockPinResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::UnblockPinResult& unblockPinResult) const {
            return static_cast< uint8_t>(unblockPinResult);
        }
    };
    //Hash for VerifyPinResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::VerifyPinResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::VerifyPinResult& verifyPinResult) const {
            return static_cast< uint8_t>(verifyPinResult);
        }
    };
    //Hash for ChangePinResult
    template<>
    struct hash< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ChangePinResult> {
        inline size_t operator()(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ChangePinResult& changePinResult) const {
            return static_cast< uint8_t>(changePinResult);
        }
    };
}



#endif // DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTORTYPES_Sim_Profile_Selector_Types_HPP_
