/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_SIM_PROFILE_SELECTOR_SOMEIP_STUB_ADAPTER_HPP_
#define V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_SIM_PROFILE_SELECTOR_SOMEIP_STUB_ADAPTER_HPP_

#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelectorStub.hpp>
#include <de/bmw/infotainment/telematic/simprofileselectortypes/SimProfileSelectorTypesSomeIPDeployment.hpp>
#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelectorSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v3 {
namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselector {

template <typename _Stub = ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub, typename... _Stubs>
class SimProfileSelectorSomeIPStubAdapterInternal
    : public virtual SimProfileSelectorStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> SimProfileSelectorSomeIPStubAdapterHelper;

    ~SimProfileSelectorSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        SimProfileSelectorSomeIPStubAdapterHelper::deinit();
    }

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    void fireCsimMemorySpaceAttributeChanged(const int64_t &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    void fireCsimNetworkAttributeChanged(const std::string &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    void fireEidAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    void fireImeiAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    void fireProfilesAttributeChanged(const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    void firePsimNetworkAttributeChanged(const std::string &_value);
    
    /*
     * description: 
     * Standard[en]=WAVE broadcasts the result of the download and installation the consumer SIM profile started with the sendActivationCode method
     * SPP subscribes to this broadcast after sending an activation code to start the download process
     */
    void fireDownloadAndInstallResultEvent(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activationCode, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult &_installationresult);

    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        CommonAPI::Version
    > getSimProfileSelectorInterfaceVersionStubDispatcher;

    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        int64_t,
        CommonAPI::SomeIP::IntegerDeployment<int64_t>
    > getCsimMemorySpaceAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getCsimNetworkAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid,
        CommonAPI::SomeIP::StringDeployment
    > getEidAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei,
        CommonAPI::SomeIP::StringDeployment
    > getImeiAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile >,
        CommonAPI::SomeIP::ArrayDeployment< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CSimProfileDeployment_t >
    > getProfilesAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
     * (at)example: 0 - 5
     */
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::string,
        CommonAPI::SomeIP::StringDeployment
    > getPsimNetworkAttributeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t>
    > changePinStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, bool>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t>
    > configureDataConnectionStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, bool>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::EmptyDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t>
    > configureProfileRoamingStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t>
    > disablePinStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t>
    > enablePinStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< >,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult, std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >>,
        std::tuple< >,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >>
    > requestDeleteAllProfilesStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t>
    > requestDeleteSimProfileStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t>
    > requestDisableSimProfileStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
     * (asterisk) consumer SIM profile
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t>
    > requestEnableSimProfileStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t>
    > sendActivationCodeStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t>
    > unblockPinStubDispatcher;
    
    /*
     * description: 
     * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
     */
    CommonAPI::SomeIP::MethodWithReplyStubDispatcher<
        ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult>,
        std::tuple< CommonAPI::SomeIP::StringDeployment, CommonAPI::SomeIP::StringDeployment>,
        std::tuple< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t>
    > verifyPinStubDispatcher;
    
    SimProfileSelectorSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        SimProfileSelectorSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< SimProfileSelectorStub>(_stub)),
        getSimProfileSelectorInterfaceVersionStubDispatcher(&SimProfileSelectorStub::lockInterfaceVersionAttribute, &SimProfileSelectorStub::getInterfaceVersion, false, true),
        getCsimMemorySpaceAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockCsimMemorySpaceAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getCsimMemorySpaceAttribute,
            false,
            _stub->hasElement(13))
        ,
        getCsimNetworkAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockCsimNetworkAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getCsimNetworkAttribute,
            false,
            _stub->hasElement(14), &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::csimNetworkDeployment)
        ,
        getEidAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockEidAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getEidAttribute,
            false,
            _stub->hasElement(15))
        ,
        getImeiAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockImeiAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getImeiAttribute,
            false,
            _stub->hasElement(16))
        ,
        getProfilesAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockProfilesAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getProfilesAttribute,
            false,
            _stub->hasElement(17))
        ,
        getPsimNetworkAttributeStubDispatcher(
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::lockPsimNetworkAttribute,
            &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub::getPsimNetworkAttribute,
            false,
            _stub->hasElement(18), &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::psimNetworkDeployment)
        ,
        changePinStubDispatcher(
            &SimProfileSelectorStub::changePin,
            false,
            _stub->hasElement(1),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t* >(nullptr)))
        
        ,
        configureDataConnectionStubDispatcher(
            &SimProfileSelectorStub::configureDataConnection,
            false,
            _stub->hasElement(2),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t* >(nullptr)))
        
        ,
        configureProfileRoamingStubDispatcher(
            &SimProfileSelectorStub::configureProfileRoaming,
            false,
            _stub->hasElement(3),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::EmptyDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t* >(nullptr)))
        
        ,
        disablePinStubDispatcher(
            &SimProfileSelectorStub::disablePin,
            false,
            _stub->hasElement(4),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t* >(nullptr)))
        
        ,
        enablePinStubDispatcher(
            &SimProfileSelectorStub::enablePin,
            false,
            _stub->hasElement(5),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t* >(nullptr)))
        
        ,
        requestDeleteAllProfilesStubDispatcher(
            &SimProfileSelectorStub::requestDeleteAllProfiles,
            false,
            _stub->hasElement(6),
            std::make_tuple(),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t* >(nullptr), static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >* >(nullptr)))
        
        ,
        requestDeleteSimProfileStubDispatcher(
            &SimProfileSelectorStub::requestDeleteSimProfile,
            false,
            _stub->hasElement(7),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t* >(nullptr)))
        
        ,
        requestDisableSimProfileStubDispatcher(
            &SimProfileSelectorStub::requestDisableSimProfile,
            false,
            _stub->hasElement(8),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t* >(nullptr)))
        
        ,
        requestEnableSimProfileStubDispatcher(
            &SimProfileSelectorStub::requestEnableSimProfile,
            false,
            _stub->hasElement(9),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t* >(nullptr)))
        
        ,
        sendActivationCodeStubDispatcher(
            &SimProfileSelectorStub::sendActivationCode,
            false,
            _stub->hasElement(10),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t* >(nullptr)))
        
        ,
        unblockPinStubDispatcher(
            &SimProfileSelectorStub::unblockPin,
            false,
            _stub->hasElement(11),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t* >(nullptr)))
        
        ,
        verifyPinStubDispatcher(
            &SimProfileSelectorStub::verifyPin,
            false,
            _stub->hasElement(12),
            std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
            std::make_tuple(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t* >(nullptr)))
        
    {
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x9) }, &getCsimMemorySpaceAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x8) }, &getCsimNetworkAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x6) }, &getEidAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x7) }, &getImeiAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x5) }, &getProfilesAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
         * (at)example: 0 - 5
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x1a) }, &getPsimNetworkAttributeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x12) }, &changePinStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x17) }, &configureDataConnectionStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x16) }, &configureProfileRoamingStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x13) }, &disablePinStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x14) }, &enablePinStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xb) }, &requestDeleteAllProfilesStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xa) }, &requestDeleteSimProfileStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xe) }, &requestDisableSimProfileStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
         * (asterisk) consumer SIM profile
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xd) }, &requestEnableSimProfileStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc) }, &sendActivationCodeStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x15) }, &unblockPinStubDispatcher );
        /*
         * description: 
         * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
         */
        SimProfileSelectorSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0x11) }, &verifyPinStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>();

        // Provided events/fields
        {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(0x1));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8011), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_EVENT, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
        }
        if (_stub->hasElement(13)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8009), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireCsimMemorySpaceAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getCsimMemorySpaceAttribute(itsClient));
        }

        if (_stub->hasElement(14)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8008), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireCsimNetworkAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getCsimNetworkAttribute(itsClient));
        }

        if (_stub->hasElement(15)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8006), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireEidAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getEidAttribute(itsClient));
        }

        if (_stub->hasElement(16)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8007), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireImeiAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getImeiAttribute(itsClient));
        }

        if (_stub->hasElement(17)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x8005), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            fireProfilesAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getProfilesAttribute(itsClient));
        }

        if (_stub->hasElement(18)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0x1)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x801a), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE);
            firePsimNetworkAttributeChanged(std::dynamic_pointer_cast< ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub>(_stub)->getPsimNetworkAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the CSIM free memory space.
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCsimMemorySpaceAttributeChanged(const int64_t &_value) {
    CommonAPI::Deployable< int64_t, CommonAPI::SomeIP::IntegerDeployment<int64_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                int64_t,
                CommonAPI::SomeIP::IntegerDeployment<int64_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8009),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the cSIM
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireCsimNetworkAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::csimNetworkDeployment);
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8008),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to the MGU where it can receive the EID of the CSIM
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireEidAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid &_value) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Eid,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8006),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to the MGU where it can receive the IMEI of the CSIM
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireImeiAttributeChanged(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei &_value) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Imei,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8007),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to the MGU where it can receive a list of the  existing profiles stored in the consumer SIM.
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireProfilesAttributeChanged(const std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile > &_value) {
    CommonAPI::Deployable< std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile >, CommonAPI::SomeIP::ArrayDeployment< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CSimProfileDeployment_t >> deployedValue(_value, static_cast< CommonAPI::SomeIP::ArrayDeployment< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CSimProfileDeployment_t >* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CSimProfile >,
                CommonAPI::SomeIP::ArrayDeployment< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CSimProfileDeployment_t >
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x8005),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to the MGU where it can receive the current network status of the pSIM
 * (at)example: 0 - 5
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::firePsimNetworkAttributeChanged(const std::string &_value) {
    CommonAPI::Deployable< std::string, CommonAPI::SomeIP::StringDeployment> deployedValue(_value, &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::psimNetworkDeployment);
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                std::string,
                CommonAPI::SomeIP::StringDeployment
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x801a),
        false,
        deployedValue
    );
}

/*
 * description: 
 * Standard[en]=WAVE broadcasts the result of the download and installation the consumer SIM profile started with the sendActivationCode method
 * SPP subscribes to this broadcast after sending an activation code to start the download process
 */
template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDownloadAndInstallResultEvent(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activationCode, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult &_installationresult) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deployed_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode, CommonAPI::SomeIP::StringDeployment> deployed_activationCode(_activationCode, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::InstallationResultDeployment_t> deployed_installationresult(_installationresult, &::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::InstallationResultDeployment);
    CommonAPI::SomeIP::StubEventHelper<CommonAPI::SomeIP::SerializableArguments<  CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode, CommonAPI::SomeIP::StringDeployment > 
    ,  CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::InstallationResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::InstallationResultDeployment_t > 
    >>
        ::sendEvent(
            *this,
            CommonAPI::SomeIP::event_id_t(0x8011),
            false,
             deployed_iccid 
            ,  deployed_activationCode 
            ,  deployed_installationresult 
    );
}


template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelectorStub, typename... _Stubs>
class SimProfileSelectorSomeIPStubAdapter
    : public SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    SimProfileSelectorSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          SimProfileSelectorSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace simprofileselector
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de
} // namespace v3

#endif // V3_DE_BMW_INFOTAINMENT_TELEMATIC_SIMPROFILESELECTOR_Sim_Profile_Selector_SOMEIP_STUB_ADAPTER_HPP_
