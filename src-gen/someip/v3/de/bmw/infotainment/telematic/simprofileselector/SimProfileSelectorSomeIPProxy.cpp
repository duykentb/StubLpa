/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#include <v3/de/bmw/infotainment/telematic/simprofileselector/SimProfileSelectorSomeIPProxy.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v3 {
namespace de {
namespace bmw {
namespace infotainment {
namespace telematic {
namespace simprofileselector {

std::shared_ptr<CommonAPI::SomeIP::Proxy> createSimProfileSelectorSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection) {
    return std::make_shared< SimProfileSelectorSomeIPProxy>(_address, _connection);
}

void initializeSimProfileSelectorSomeIPProxy() {
    CommonAPI::SomeIP::AddressTranslator::get()->insert(
        "local:de.bmw.infotainment.telematic.simprofileselector.SimProfileSelector:v3_0:1",
        0xb08e, 0x1, 3, 0);
    CommonAPI::SomeIP::Factory::get()->registerProxyCreateMethod(
        "de.bmw.infotainment.telematic.simprofileselector.SimProfileSelector:v3_0",
        &createSimProfileSelectorSomeIPProxy);
}

INITIALIZER(registerSimProfileSelectorSomeIPProxy) {
    CommonAPI::SomeIP::Factory::get()->registerInterface(initializeSimProfileSelectorSomeIPProxy);
}

SimProfileSelectorSomeIPProxy::SimProfileSelectorSomeIPProxy(
    const CommonAPI::SomeIP::Address &_address,
    const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection)
        : CommonAPI::SomeIP::Proxy(_address, _connection),
          csimMemorySpace_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8009), CommonAPI::SomeIP::method_id_t(0x9), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::SomeIP::IntegerDeployment<int64_t>* >(nullptr)),
          csimNetwork_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8008), CommonAPI::SomeIP::method_id_t(0x8), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::csimNetworkDeployment),
          eid_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8006), CommonAPI::SomeIP::method_id_t(0x6), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          imei_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8007), CommonAPI::SomeIP::method_id_t(0x7), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr)),
          profiles_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x8005), CommonAPI::SomeIP::method_id_t(0x5), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, static_cast< CommonAPI::SomeIP::ArrayDeployment< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CSimProfileDeployment_t >* >(nullptr)),
          psimNetwork_(*this, CommonAPI::SomeIP::eventgroup_id_t(0x1), CommonAPI::SomeIP::event_id_t(0x801a), CommonAPI::SomeIP::method_id_t(0x1a), false, CommonAPI::SomeIP::reliability_type_e::RT_UNRELIABLE, false, &::v3::de::bmw::infotainment::telematic::simprofileselector::SimProfileSelector_::psimNetworkDeployment),
          downloadAndInstallResult_(*this, 0x1, CommonAPI::SomeIP::event_id_t(0x8011), CommonAPI::SomeIP::event_type_e::ET_EVENT , CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE, false, std::make_tuple(static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr), &::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::InstallationResultDeployment))
{
}

SimProfileSelectorSomeIPProxy::~SimProfileSelectorSomeIPProxy() {
}

SimProfileSelectorSomeIPProxy::CsimMemorySpaceAttribute& SimProfileSelectorSomeIPProxy::getCsimMemorySpaceAttribute() {
    return csimMemorySpace_;
}
SimProfileSelectorSomeIPProxy::CsimNetworkAttribute& SimProfileSelectorSomeIPProxy::getCsimNetworkAttribute() {
    return csimNetwork_;
}
SimProfileSelectorSomeIPProxy::EidAttribute& SimProfileSelectorSomeIPProxy::getEidAttribute() {
    return eid_;
}
SimProfileSelectorSomeIPProxy::ImeiAttribute& SimProfileSelectorSomeIPProxy::getImeiAttribute() {
    return imei_;
}
SimProfileSelectorSomeIPProxy::ProfilesAttribute& SimProfileSelectorSomeIPProxy::getProfilesAttribute() {
    return profiles_;
}
SimProfileSelectorSomeIPProxy::PsimNetworkAttribute& SimProfileSelectorSomeIPProxy::getPsimNetworkAttribute() {
    return psimNetwork_;
}

SimProfileSelectorSomeIPProxy::DownloadAndInstallResultEvent& SimProfileSelectorSomeIPProxy::getDownloadAndInstallResultEvent() {
    return downloadAndInstallResult_;
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to modify the current PIN used to protect the cSIM profile
 */
void SimProfileSelectorSomeIPProxy::changePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _oldPin, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult &_modifypin, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_oldPin(_oldPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_newPin(_newPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t> deploy_modifypin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x12),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_oldPin, deploy_newPin,
        _internalCallStatus,
        deploy_modifypin);
    _modifypin = deploy_modifypin.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::changePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_oldPin, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, ChangePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_oldPin(_oldPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_newPin(_newPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t> deploy_modifypin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x12),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_oldPin, deploy_newPin,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ModifyPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ModifyPinResultDeployment_t > _modifypin) {
            if (_callback)
                _callback(_internalCallStatus, _modifypin.getValue());
        },
        std::make_tuple(deploy_modifypin));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it send the information of Hotspot (data connection) status for the currently enabled profile.
 */
void SimProfileSelectorSomeIPProxy::configureDataConnection(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _hotspotActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult &_dataConfig, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_hotspotActive(_hotspotActive, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t> deploy_dataConfig(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x17),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_hotspotActive,
        _internalCallStatus,
        deploy_dataConfig);
    _dataConfig = deploy_dataConfig.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::configureDataConnectionAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_hotspotActive, ConfigureDataConnectionAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_hotspotActive(_hotspotActive, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t> deploy_dataConfig(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x17),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_hotspotActive,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DataConnectionConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DataConnectionConfigResultDeployment_t > _dataConfig) {
            if (_callback)
                _callback(_internalCallStatus, _dataConfig.getValue());
        },
        std::make_tuple(deploy_dataConfig));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it send the information of Roaming status for the currently enabled profile
 */
void SimProfileSelectorSomeIPProxy::configureProfileRoaming(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, bool _roamingActive, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult &_roamingconfig, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_roamingActive(_roamingActive, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t> deploy_roamingconfig(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x16),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_roamingActive,
        _internalCallStatus,
        deploy_roamingconfig);
    _roamingconfig = deploy_roamingconfig.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::configureProfileRoamingAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const bool &_roamingActive, ConfigureProfileRoamingAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< bool, CommonAPI::EmptyDeployment> deploy_roamingActive(_roamingActive, static_cast< CommonAPI::EmptyDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t> deploy_roamingconfig(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                bool,
                CommonAPI::EmptyDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x16),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_roamingActive,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RoamingConfigResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RoamingConfigResultDeployment_t > _roamingconfig) {
            if (_callback)
                _callback(_internalCallStatus, _roamingconfig.getValue());
        },
        std::make_tuple(deploy_roamingconfig));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to disable the protection of the user's SIM profile via PIN
 */
void SimProfileSelectorSomeIPProxy::disablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult &_removepin, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t> deploy_removepin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x13),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        _internalCallStatus,
        deploy_removepin);
    _removepin = deploy_removepin.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::disablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, DisablePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t> deploy_removepin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x13),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::RemovePinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::RemovePinResultDeployment_t > _removepin) {
            if (_callback)
                _callback(_internalCallStatus, _removepin.getValue());
        },
        std::make_tuple(deploy_removepin));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can send a request to enable the protection of the user's SIM profile via PIN
 */
void SimProfileSelectorSomeIPProxy::enablePin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult &_setpin, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t> deploy_setpin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x14),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        _internalCallStatus,
        deploy_setpin);
    _setpin = deploy_setpin.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::enablePinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, EnablePinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t> deploy_setpin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x14),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::SetPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::SetPinResultDeployment_t > _setpin) {
            if (_callback)
                _callback(_internalCallStatus, _setpin.getValue());
        },
        std::make_tuple(deploy_setpin));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of all profiles installed in the vehicle
 */
void SimProfileSelectorSomeIPProxy::requestDeleteAllProfiles(CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult &_deleteall, std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid > &_iccid, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t> deploy_deleteall(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t* >(nullptr));
    CommonAPI::Deployable< std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >> deploy_iccid(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xb),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        _internalCallStatus,
        deploy_deleteall, deploy_iccid);
    _deleteall = deploy_deleteall.getValue();
    _iccid = deploy_iccid.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::requestDeleteAllProfilesAsync(RequestDeleteAllProfilesAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t> deploy_deleteall(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t* >(nullptr));
    CommonAPI::Deployable< std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >> deploy_iccid(static_cast< CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t
            >,
            CommonAPI::Deployable<
                std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >,
                CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment >
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xb),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteAllResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteAllResultDeployment_t > _deleteall, CommonAPI::Deployable< std::vector< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid >, CommonAPI::SomeIP::ArrayDeployment< CommonAPI::SomeIP::StringDeployment > > _iccid) {
            if (_callback)
                _callback(_internalCallStatus, _deleteall.getValue(), _iccid.getValue());
        },
        std::make_tuple(deploy_deleteall, deploy_iccid));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the deletion of a consumer SIM profile
 */
void SimProfileSelectorSomeIPProxy::requestDeleteSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult &_deleteresult, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t> deploy_deleteresult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        _internalCallStatus,
        deploy_deleteresult);
    _deleteresult = deploy_deleteresult.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::requestDeleteSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDeleteSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t> deploy_deleteresult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xa),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DeleteResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DeleteResultDeployment_t > _deleteresult) {
            if (_callback)
                _callback(_internalCallStatus, _deleteresult.getValue());
        },
        std::make_tuple(deploy_deleteresult));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the disable of a consumer SIM profile
 */
void SimProfileSelectorSomeIPProxy::requestDisableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult &_disableResult, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t> deploy_disableResult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xe),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        _internalCallStatus,
        deploy_disableResult);
    _disableResult = deploy_disableResult.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::requestDisableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestDisableSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t> deploy_disableResult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xe),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::DisableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::DisableResultDeployment_t > _disableResult) {
            if (_callback)
                _callback(_internalCallStatus, _disableResult.getValue());
        },
        std::make_tuple(deploy_disableResult));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can request the enable of a
 * (asterisk) consumer SIM profile
 */
void SimProfileSelectorSomeIPProxy::requestEnableSimProfile(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult &_enableResult, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t> deploy_enableResult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xd),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        _internalCallStatus,
        deploy_enableResult);
    _enableResult = deploy_enableResult.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::requestEnableSimProfileAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, RequestEnableSimProfileAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t> deploy_enableResult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xd),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::EnableResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::EnableResultDeployment_t > _enableResult) {
            if (_callback)
                _callback(_internalCallStatus, _enableResult.getValue());
        },
        std::make_tuple(deploy_enableResult));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU it can send the activation code to the SIM profile switch component
 */
void SimProfileSelectorSomeIPProxy::sendActivationCode(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode _activation, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode _confirmationCode, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult &_acresult, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode, CommonAPI::SomeIP::StringDeployment> deploy_activation(_activation, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode, CommonAPI::SomeIP::StringDeployment> deploy_confirmationCode(_confirmationCode, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t> deploy_acresult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0xc),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_activation, deploy_confirmationCode,
        _internalCallStatus,
        deploy_acresult);
    _acresult = deploy_acresult.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::sendActivationCodeAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode &_activation, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode &_confirmationCode, SendActivationCodeAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode, CommonAPI::SomeIP::StringDeployment> deploy_activation(_activation, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode, CommonAPI::SomeIP::StringDeployment> deploy_confirmationCode(_confirmationCode, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t> deploy_acresult(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCode,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ConfirmationCode,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0xc),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_activation, deploy_confirmationCode,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::ActivationCodeResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::ActivationCodeResultDeployment_t > _acresult) {
            if (_callback)
                _callback(_internalCallStatus, _acresult.getValue());
        },
        std::make_tuple(deploy_acresult));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN stored or introduced by the user for ICCID is correct
 */
void SimProfileSelectorSomeIPProxy::unblockPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk _puk, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _newPin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult &_checkpuk, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk, CommonAPI::SomeIP::StringDeployment> deploy_puk(_puk, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_newPin(_newPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t> deploy_checkpuk(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x15),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_puk, deploy_newPin,
        _internalCallStatus,
        deploy_checkpuk);
    _checkpuk = deploy_checkpuk.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::unblockPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk &_puk, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_newPin, UnblockPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk, CommonAPI::SomeIP::StringDeployment> deploy_puk(_puk, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_newPin(_newPin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t> deploy_checkpuk(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Puk,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x15),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_puk, deploy_newPin,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPukResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPukResultDeployment_t > _checkpuk) {
            if (_callback)
                _callback(_internalCallStatus, _checkpuk.getValue());
        },
        std::make_tuple(deploy_checkpuk));
}

/*
 * description: 
 * Standard[en]=WAVE provides an interface to MGU where it can check whether the PIN
 */
void SimProfileSelectorSomeIPProxy::verifyPin(::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid _iccid, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin _pin, CommonAPI::CallStatus &_internalCallStatus, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult &_checkpin, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t> deploy_checkpin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t* >(nullptr));
    CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t
            >
        >
    >::callMethodWithReply(
        *this,
        CommonAPI::SomeIP::method_id_t(0x11),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        _internalCallStatus,
        deploy_checkpin);
    _checkpin = deploy_checkpin.getValue();
}

std::future<CommonAPI::CallStatus> SimProfileSelectorSomeIPProxy::verifyPinAsync(const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid &_iccid, const ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin &_pin, VerifyPinAsyncCallback _callback, const CommonAPI::CallInfo *_info) {
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid, CommonAPI::SomeIP::StringDeployment> deploy_iccid(_iccid, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin, CommonAPI::SomeIP::StringDeployment> deploy_pin(_pin, static_cast< CommonAPI::SomeIP::StringDeployment* >(nullptr));
    CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t> deploy_checkpin(static_cast< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t* >(nullptr));
    return CommonAPI::SomeIP::ProxyHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Iccid,
                CommonAPI::SomeIP::StringDeployment
            >,
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::Pin,
                CommonAPI::SomeIP::StringDeployment
            >
        >,
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult,
                ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t
            >
        >
    >::callMethodAsync(
        *this,
        CommonAPI::SomeIP::method_id_t(0x11),
        true,
        false,
        (_info ? _info : &CommonAPI::SomeIP::defaultCallInfo),
        deploy_iccid, deploy_pin,
        [_callback] (CommonAPI::CallStatus _internalCallStatus, CommonAPI::Deployable< ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes::CheckPinResult, ::de::bmw::infotainment::telematic::simprofileselectortypes::SimProfileSelectorTypes_::CheckPinResultDeployment_t > _checkpin) {
            if (_callback)
                _callback(_internalCallStatus, _checkpin.getValue());
        },
        std::make_tuple(deploy_checkpin));
}

void SimProfileSelectorSomeIPProxy::getOwnVersion(uint16_t& ownVersionMajor, uint16_t& ownVersionMinor) const {
    ownVersionMajor = 3;
    ownVersionMinor = 0;
}

std::future<void> SimProfileSelectorSomeIPProxy::getCompletionFuture() {
    return CommonAPI::SomeIP::Proxy::getCompletionFuture();
}

} // namespace simprofileselector
} // namespace telematic
} // namespace infotainment
} // namespace bmw
} // namespace de
} // namespace v3
